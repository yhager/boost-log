[/
              Copyright Andrey Semashev 2007 - 2010.
     Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
              http://www.boost.org/LICENSE_1_0.txt)

    This document is a part of Boost.Log library documentation.
/]

[section:changelog Changelog]

[heading 2.0]

* The library is now compatible with Boost 1.42 or newer.
* The `BOOST_LOG_NO_COMPILER_TLS` configuration macro has been replaced with `BOOST_LOG_USE_COMPILER_TLS` with the opposite meaning. The support for compiler intrinsics for TLS is now disabled by default.
* Most code examples from the docs have been extracted into compilable standalone examples, which can be used for testing and experimenting with the library.
* Fixed a bug: the logging core could enter an infinite loop inside `push_record` if a sink throws and the exception is suppressed by the exception handler set in the core.
* Fixed compilation problems with `BOOST_LOG_WFUNCTION` and exception handling logger feature.
* Types for integral constants for syslog and event log were renamed to drop the `_t` suffix.
* Changed the type dispatching implementation to reduce the usage of virtual functions. This reduced the library size by up to 40%.
* The interface of type dispatchers changed. The dispatcher now returns `type_visitor` instance by value, and the visitor is no longer a base for the actual receiver of the dispatched value. Instead, the visitor now refers to the receiver, if one is capable to consume the value. The `visit` method has been renamed to `operator ()`. The static type dispatcher now requires a reference to the receiver on construction, it doesn't imply that the receiver derives from the dispatcher anymore.
* The attribute value no longer has the `get` method. Use the `extract` function as a replacement.
* Type dispatchers and global logger storage made more friendly to the setups in which hidden visibility is set by default.
* The library now uses __boost_xpressive__ instead of __boost_regex__ internally, which makes it unnecessary to build the latter in order to use the library. __boost_regex__ is still supported on the user's side.
* Changed the interface and the way of handling attribute values. The value is now a pimpl wrapper around the value holder. The `attribute_value` class in various components of the library is no longer pointed to with `shared_ptr`s but instead is handled by value. This allowed to simplify attribute value handling in simple cases.
* Added the macros for separated global logger declaration and definition. Old macros have been renamed to better reflect their effect (`BOOST_LOG_DECLARE_GLOBAL_LOGGER_INIT` to `BOOST_LOG_INLINE_GLOBAL_LOGGER_INIT`, `BOOST_LOG_DECLARE_GLOBAL_LOGGER` to `BOOST_LOG_INLINE_GLOBAL_LOGGER_DEFAULT`, `BOOST_LOG_DECLARE_GLOBAL_LOGGER_CTOR_ARGS` to `BOOST_LOG_INLINE_GLOBAL_LOGGER_CTOR_ARGS`). Also, the macros no longer define the `get_logger` free function for logger acquisition. Use `logger::get` instead. See [link log.detailed.sources.global_storage here] for more information.
* Made some internal code to detect Windows NT6 API availability at run time, if not explicitly enabled by the `BOOST_LOG_USE_WINNT6_API` macro. The code compiled without the macro defined will still be able run on NT5, but when run on NT6 it will be more efficient. With the macro defined the resulting code will not run on NT5, but will be a little more efficient on NT6 than without the macro.
* The key type of attribute sets and attribute values view has been changed. The new key type is called `attribute_name` (`wattribute_name` for wide-character logging). It is convertible from strings, so in most cases users won't need to change the code. See [link log.detailed.attributes.related_components.attribute_name here] for more information.
* Attribute sets and attribute values views no longer maintain order of elements. Although it wasn't stated explicitly, the containers used to be ordered associative containers. Now the order of elements is unspecified. The implementation has been reworked to speed up insertion/removal of attributes, as well as attribute lookup and values view construction. The drawback is that memory footprint may get increased in some cases.
* Attribute sets now use small memory pools to speed up element insertion/removal.
* The `slim_string` utility has been removed. There is no replacement.
* The headers `scoped_attribute.hpp` and `attribute_value_extractor.hpp` header moved from `utility` to the `attributes` directory.
* Made a lot of improvements to speedup code compilation.

[heading 1.0, 09 May 2010]

This release mostly fixes bugs in the code and documentation. The next major release (2.0) will contain breaking changes and feature additions. The 1.0 branch will not receive any feature updates.

* Added some optimization for thread local storage. In Windows setups, if you dynamically load Boost.Log binaries during the application run time, this optimization may lead to crashes. In that case, you may disable it by defining `BOOST_LOG_NO_COMPILER_TLS` during the library build process. The macro also affects other platforms, which may be useful if your compiler does not support TLS.
* Added a few public accessors and convenience constructors to severity and channel loggers.
* Added ability to rotate log files at the specified time points. The `rotation_interval` keyword is no longer available. The same functionality is achieved with the new `time_based_rotation` keyword and the `rotation_at_time_interval` predicate. See [link log.detailed.sink_backends.text_file here] for more details.
* Improved support for MinGW and Cygwin.
* A number of bugs fixed. Added workarounds to compile on GCC 4.2.
* Lots of corrections in the documentation.

[heading Release Candidate 4, 08 Jan 2010]

* Substantial documentation improvement. The tutorial section has been reorganized.
* Library headers have been reorganized. Some other Boost libraries that were previously included by headers have been made optional. Such dependencies have been extracted into separate headers in the `support` directory. Top level library headers now mostly include nested headers.
* Keywords have moved into a dedicated `keywords` namespace. There are no longer nested `keywords` namespaces in `sinks`, `attributes`, etc. All keywords have been extracted into separate headers in the `keywords` directory.
* Removed rotating file stream. As a replacement, a [link log.detailed.sink_backends.text_file new file sink] has been added, which allows to achieve the same results ans adds a few more features.
* Added a new [link log.detailed.sink_backends.text_multifile multifile] sink backend.
* Added a new [link log.detailed.sink_frontends.ordering_async ordering asynchronous] sink frontend.
* The [link log.detailed.sink_backends.syslog syslog] sink backend is now supported on Windows, too. The sink no longer requires native support for POSIX API for syslog, but is able to send syslog packets to a remote server over UDP.
* Loggers implementation has been improved. Feature composition mechanism has been cleaned up.
* Added support for scoped logging. There is now a distinct [link log.detailed.core.record log record entity], which is returned by the core as a result of filtering. It is possible to fill in the record message in any way the user wants, not necessarilly with a streaming expression. The record object is now processed by sinks and formatters.
* Added support for exception control. User can register exception handlers at one of the three layers: for a particular sink, at the core layer, and for a particular logger (given that it has the appropriate feature). Sinks and core will not suppress exceptions by default. Filter and formatters will throw if the requested attribute value is not found.
* Added a few new formatters, called [link log.detailed.formatters.decorators character decorators]. These can be useful to post-process the formatted output before passing it on to the sink.
* Added attributes for thread and process identifiers. These identifiers are automatically added after the call to `add_common_attributes`.
* Helper initialization functions, such as `init_log_to_file` now accept more customization options as named arguments.
* A new [link log.detailed.utilities.init.settings initialization interface] has been exposed. One can fill a settings container and use it to initialize the library.
* The library setup support code has beed extracted into a separate binary. Further on, this binary will be made optional to build.
* Added a new mode of logging, called trivial logging. In this mode the library requires no initialization at all, however it does not offer many ways of customization.
* A number of bugs fixed.
* A few optimizations added to improve multithreaded applications performance.
* Removed some bug workarounds for older Boost releases. The library now requires Boost 1.39 or newer.

[heading Release Candidate 3, 08 Feb 2009]

* Substantial documentation improvement.
* Added several Windows-specific sinks: Event Log (simplified and advanced), Windows debugger and experimental Event Trace for Windows Vista and later.
* Loggers now consist of a number of independent features that can be composed the way the user needs. User-defined features can be developed and injected into the mix.
* Attribute value extractors improved. With the new extract function attribute values can be extracted from the attribute values view by employing lambda functors.
* Some files and classes were moved or renamed to improve code clarity and shorten names.
* A number of bugs fixed.
* Added tests.

[heading Release Candidate 2]

Noone really remembers these dark ages...

[endsect]
